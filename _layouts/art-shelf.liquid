---
layout: page
---
{{ content }}

<div class="art-portfolio">

<!-- Filter Controls -->
<div class="portfolio-filters">
  <!-- Medium Filters -->
  <div class="filter-group">
    <h3>Medium</h3>
    <div class="filter-buttons">
      <button class="filter-btn active" data-filter-type="medium" data-filter="all">all</button>
      {% assign all_mediums = site.art | map: 'medium' | compact %}
      {% assign downcase_mediums = '' | split: ',' %}
      {% for medium in all_mediums %}
        {% assign downcase_medium = medium | downcase %}
        {% assign downcase_mediums = downcase_mediums | push: downcase_medium %}
      {% endfor %}
      {% assign unique_mediums = downcase_mediums | uniq %}
      {% for medium in unique_mediums %}
        <button class="filter-btn" data-filter-type="medium" data-filter="{{ medium | slugify }}">{{ medium }}</button>
      {% endfor %}
    </div>
  </div>

  <!-- Category Filters -->
  {% assign all_categories = site.art | map: 'categories' | compact | flatten %}
  {% assign downcase_categories = '' | split: ',' %}
  {% for category in all_categories %}
    {% assign downcase_category = category | downcase %}
    {% assign downcase_categories = downcase_categories | push: downcase_category %}
  {% endfor %}
  {% assign unique_categories = downcase_categories | uniq %}
  {% if unique_categories.size > 0 %}
  <div class="filter-group">
    <h3>Categories</h3>
    <div class="filter-buttons">
      <button class="filter-btn active" data-filter-type="category" data-filter="all">all</button>
      {% for category in unique_categories %}
        <button class="filter-btn" data-filter-type="category" data-filter="{{ category | slugify }}">{{ category }}</button>
      {% endfor %}
    </div>
  </div>
  {% endif %}

  
  <!-- Tag Filters -->
  <!--{% assign all_tags = site.art | map: 'tags' | compact | flatten | uniq %}
  {% if all_tags.size > 0 %}
  <div class="filter-group">
    <h3>Tags</h3>
    <div class="filter-buttons">
      <button class="filter-btn active" data-filter-type="tag" data-filter="all">All</button>
      {% for tag in all_tags %}
        <button class="filter-btn" data-filter-type="tag" data-filter="{{ tag | downcase | slugify }}">{{ tag | downcase }}</button>
      {% endfor %}
    </div>
  </div>
  {% endif %}
</div>-->

<div class="art-grid">
{% assign year = '' %}
  {% assign collection = site[page.collection] %}
  {% if collection and collection.size > 0 %}
    {% assign sorted_collection = collection | sort: "date" | reverse %}
    {% for item in sorted_collection %}
      {% assign current_year = item.date | date: "%Y" %}
      {% if current_year != year %}
        <h1>{{ current_year }}</h1>
        {% assign year = current_year %}
      {% endif %}
      <figure class="artwork-cover" 
              data-medium="{{ item.medium | downcase | slugify | default: 'unknown' }}"
              data-categories="{% if item.categories %}{% for category in item.categories %}{{ category | downcase | slugify }}{% unless forloop.last %},{% endunless %}{% endfor %}{% endif %}"
              data-tags="{% if item.tags %}{% for tag in item.tags %}{{ tag | downcase | slugify }}{% unless forloop.last %},{% endunless %}{% endfor %}{% endif %}">
        <a class="artwork-link" href="{{ item.url | relative_url }}">
          {% if item.image %}
            {% if item.image contains 'assets/img/' %}
              {% assign image_path = item.image %}
            {% else %}
              {% assign image_path = item.image | prepend: 'assets/img/' %}
            {% endif %}
            <img alt="{{ item.title }} artwork" src="{{ image_path | relative_url }}" style="height:200px; object-fit: contain; width: 100%;">
          {% else %}
            <div class="artwork-placeholder" style="height:200px; display: flex; align-items: center; justify-content: center; background: var(--global-bg-color); color: var(--global-text-color-light);">
              <i class="fa-solid fa-image fa-2x"></i>
            </div>
          {% endif %}
          {% if item.featured %}
            <figcaption class="featured">FEATURED</figcaption>
          {% endif %}
        </a>
      </figure>
    {% endfor %}
  {% endif %}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Filter functionality
  const filterButtons = document.querySelectorAll('.filter-btn');
  const artworkItems = document.querySelectorAll('.artwork-cover');
  const yearHeaders = document.querySelectorAll('.art-grid h1');

  // Track active filters for each type
  let activeFilters = {
    medium: 'all',
    category: 'all',
    tag: 'all'
  };

  function updateActiveButtons(filterType, filterValue) {
    // Update active button for the specific filter type
    const buttonsOfType = document.querySelectorAll(`[data-filter-type="${filterType}"]`);
    buttonsOfType.forEach(btn => {
      btn.classList.remove('active');
      if (btn.getAttribute('data-filter') === filterValue) {
        btn.classList.add('active');
      }
    });
  }

  function shouldShowItem(item) {
    // Check medium filter
    if (activeFilters.medium !== 'all') {
      const itemMedium = item.getAttribute('data-medium');
      if (itemMedium !== activeFilters.medium) {
        return false;
      }
    }

    // Check category filter
    if (activeFilters.category !== 'all') {
      const itemCategories = item.getAttribute('data-categories');
      if (!itemCategories || !itemCategories.split(',').includes(activeFilters.category)) {
        return false;
      }
    }

    // Check tag filter
    if (activeFilters.tag !== 'all') {
      const itemTags = item.getAttribute('data-tags');
      if (!itemTags || !itemTags.split(',').includes(activeFilters.tag)) {
        return false;
      }
    }

    return true;
  }

  function updateYearHeaders() {
    yearHeaders.forEach(header => {
      // Count visible artwork in this year section
      let visibleArtwork = 0;
      let currentElement = header.nextElementSibling;
      
      // Count artwork until we hit the next year header or end of grid
      while (currentElement && currentElement.tagName !== 'H1') {
        if (currentElement.classList.contains('artwork-cover') && 
            currentElement.style.display !== 'none' && 
            currentElement.style.opacity !== '0') {
          visibleArtwork++;
        }
        currentElement = currentElement.nextElementSibling;
      }
      
      // Show/hide year header based on visible artwork
      if (visibleArtwork === 0) {
        header.style.display = 'none';
      } else {
        header.style.display = 'block';
      }
    });
  }

  function applyFilters() {
    // Use requestAnimationFrame for smoother animations
    requestAnimationFrame(() => {
      artworkItems.forEach(item => {
        const shouldShow = shouldShowItem(item);
        
        if (shouldShow) {
          item.style.display = 'block';
          item.style.opacity = '0';
          item.style.transition = 'opacity 0.2s ease';
          requestAnimationFrame(() => {
            item.style.opacity = '1';
          });
        } else {
          item.style.opacity = '0';
          item.style.transition = 'opacity 0.2s ease';
          setTimeout(() => {
            if (item.style.opacity === '0') {
              item.style.display = 'none';
            }
          }, 200);
        }
      });
      
        // Update year headers after a delay to allow opacity transitions
        setTimeout(updateYearHeaders, 250);
    });
  }

  if (filterButtons.length > 0 && artworkItems.length > 0) {
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        const filterType = this.getAttribute('data-filter-type');
        const filterValue = this.getAttribute('data-filter');
        
        // Update active filters
        activeFilters[filterType] = filterValue;
        
        // Update active buttons
        updateActiveButtons(filterType, filterValue);
        
        // Apply filters
        applyFilters();
      });
    });
  }
});
</script>